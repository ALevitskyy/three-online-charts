{"version":3,"sources":["actions/index.js","generate.js","reducers/index.js","d3.js","components/chart.js","components/slider.js","helpers.js","components/appLogic.js","components/app.js","index.js"],"names":["NEW_DATA","NEW_BRUSH","random_vector","length","result","i","push","x","get_random_number","y","z","a","Math","random","reducers","state","arguments","undefined","data","brush","action","type","Object","objectSpread","payload","concat","toConsumableArray","clean","ref","d3","select","html","make_plot","linemaker","d","xScale","yScale","indexes","map","minimum","min","apply","maximum","max","straight_line","domain","range","xAxis","scale","yAxis","append","attr","call","make_slider","callback","default_brush","xScale2","xAxis2","svg","context","on","to_be_updated","brushed","extent","contextArea","y0","y1","selectAll","move","initialized","brusher","start","Number","end","brush_domain","floor","invert","Chart","this","props","ReactDOM","findDOMNode","react_default","createElement","title","className","Component","Slider","toBeUpdated","brush_callback","_this","dispatch","connect","brush_data","slice","get_data_row","variable","index","AppLogic","setInterval","window","inProcessofDoingBrush","chart_Chart","components_slider","App","es","store","createStore","appLogic","render","app_App","document","querySelector"],"mappings":"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","file":"static/js/main.4d151222.chunk.js","sourcesContent":["export const NEW_DATA = \"NEW_DATA\";\r\nexport const NEW_BRUSH = \"NEW_BRUSH\";\r\n\r\nexport function new_data_point(data_point){\r\n\t// Can put socket listener to ComponentDidMount\r\n    return {\r\n        type: NEW_DATA,\r\n        payload: data_point\r\n    };\r\n}\r\n\r\nexport function new_brush(brush_range){\r\n   return {\r\n   \t    type: NEW_BRUSH,\r\n   \t    payload: brush_range\r\n    };\r\n}","export function random_vector(length){\r\n    var result = [];\r\n    for(var i=1; i<length; i++) {result.push(get_random_point())}\r\n    return result\r\n        }\r\n\r\nfunction get_random_number(){\r\n    var a = Math.random()\r\n    a = a-0.5\r\n    a = a*2*3.14\r\n    return a\r\n        }\r\n        \r\nfunction get_random_point(){\r\n    return {\"x\":get_random_number(),\r\n            \"y\":get_random_number(),\r\n            \"z\":get_random_number()}\r\n        }","import { combineReducers } from \"redux\";\r\nimport {NEW_DATA, NEW_BRUSH} from \"../actions\";\r\nimport { random_vector } from \"../generate.js\";\r\nexport default function reducers(state = {\"data\": random_vector(100), \"brush\": null},\r\n                         action){\r\n   // Need to combine to check whether slider is set up to the end of series\r\n        if(action.type === NEW_BRUSH){\r\n            return({...state, \"brush\":action.payload})\r\n              }\r\n             \r\n\r\n        if(action.type === NEW_DATA){\r\n           if(!state.brush){\r\n             return({...state, \"data\": [...state.data, action.payload]})\r\n           }\r\n\r\n           if(state.brush[1] === (state.data.length-1)){\r\n                // If the brush in the end follow updates\r\n                  return ({\"data\":[...state.data, action.payload],\r\n                          \"brush\":  [state.brush[0]+1,\r\n                                    state.brush[1]+1] })  \r\n               }\r\n               return({...state, \"data\": [...state.data, action.payload]})\r\n        }  \r\n        return(state)}","import * as d3 from \"d3\";\r\nexport function clean(ref){\r\n  d3.select(ref).select(\"svg\").html(\"\")\r\n}\r\nexport function make_plot(data, ref){\r\n    //variable that makes a line\r\n   var linemaker = d3.line()\r\n      .x(function(d){return xScale(d.x)})\r\n      .y(function(d){return yScale(d.y)})\r\n   var length = data.length;\r\n   var indexes = data.map((d)=>{return d.x})\r\n   var minimum = Math.min(...indexes)\r\n   var maximum = Math.max(...indexes)\r\n   //define straightline and scales\r\n   var straight_line =[{\"y\":0,\"x\":minimum},\r\n                       {\"y\":0,\"x\":maximum}] ;\r\n   var yScale = d3.scaleLinear().domain([3.14,-3.14]).range([20,200]);\r\n   var xScale = d3.scaleLinear().domain([minimum,maximum])\r\n                                .range([40,600]);\r\n    //make axis\r\n   var xAxis = d3.axisTop().scale(xScale);\r\n   var yAxis = d3.axisLeft().scale(yScale);\r\n   // draw straight line\r\n    d3.select(ref)\r\n       .select(\"svg\")\r\n       .append(\"path\")\r\n       .attr(\"d\",linemaker(straight_line))\r\n       .attr(\"fill\",\"none\")\r\n       .attr(\"stroke\", \"blue\")\r\n       .attr(\"stroke-width\",1 );\r\n    // the only place apart from length where data comes in\r\n    d3.select(ref)\r\n       .select(\"svg\")\r\n       .append(\"path\")\r\n       .attr(\"d\",linemaker(data))\r\n       .attr(\"fill\",\"none\")\r\n       .attr(\"stroke\", \"black\")\r\n       .attr(\"stroke-width\",3 );\r\n    // dtaw axis\r\n    d3.select(ref)\r\n       .select(\"svg\")\r\n       .append(\"g\")\r\n       .attr(\"transform\",\"translate(0,220)\")\r\n       .call(xAxis);\r\n\r\n   d3.select(ref)\r\n       .select(\"svg\")\r\n       .append(\"g\")\r\n       .attr(\"transform\",\"translate(30,0)\")\r\n       .call(yAxis)\r\n    }\r\n    // Slider part of the code\r\nexport function make_slider(data, ref, callback, default_brush){\r\n  //console.log(data);\r\n  const width = 550;\r\n  const height = 100;\r\n  const height2 = 50;\r\n  var length = data.length;\r\n  var xScale2 = d3.scaleLinear().domain([0,length]).range([40,600]);\r\n  var xAxis2 = d3.axisBottom(xScale2); // xAxis for brush slider\r\n  // Stolen from here http://bl.ocks.org/DStruths/9c042e3a6b66048b5bd4\r\n  var svg = d3.select(ref).select(\"svg\");\r\n  // Setting up the slider interaction\r\n  var context = svg.append(\"g\") // Brushing context box container\r\n    .attr(\"class\", \"context\")\r\n    .on(\"mouseenter\",() => {\r\n      to_be_updated = false;\r\n       brushed()})\r\n     .on(\"mouseleave\",() => {\r\n      to_be_updated = true;\r\n       brushed()})\r\n//append clip path for lines plotted, hiding those part out of bounds\r\n  svg.append(\"defs\")\r\n    .append(\"clipPath\") \r\n    .attr(\"id\", \"clip\")\r\n    .append(\"rect\")\r\n    .attr(\"width\", width)\r\n    .attr(\"height\", height)\r\n\r\n  var brush = d3.brushX()\r\n    .extent([[xScale2.range()[0], 0], [xScale2.range()[1], height2]])\r\n    .on(\"brush\", brushed)\r\n\r\n  context.append(\"g\") // Create brushing xAxis\r\n    .attr(\"class\", \"x axis1\")\r\n    .attr(\"transform\", \"translate(0,\" + height2 + \")\")\r\n    .call(xAxis2)\r\n\r\n  var contextArea = d3.area() // Set attributes for area chart in brushing context graph\r\n    .x(function(d) { return xScale2(d.x); }) // x is scaled to xScale2\r\n    .y0(height2) // Bottom line begins at height2 (area chart not inverted) \r\n    .y1(0); // Top line of area, 0 (area chart not inverted)\r\n\r\n  //plot the rect as the bar at the bottom\r\n  context.append(\"path\") // Path is created using svg.area details\r\n    .attr(\"class\", \"area\")\r\n    .attr(\"d\", contextArea(data)) // pass first categories data .values to area path generator \r\n    .attr(\"fill\", \"#F1F1F2\")\r\n  //append the brush for the selection of subsection  \r\n  context.append(\"g\")\r\n    .attr(\"class\", \"x brush\")\r\n    .call(brush)\r\n    .selectAll(\"rect\")\r\n    .attr(\"height\", height2) // Make brush rects same height \r\n    .attr(\"fill\", \"#E6E7E8\")\r\n      // Set up brush correctly on rerender\r\n    if(default_brush){\r\n     d3.select(\".brush\").call(brush.move,default_brush.map(xScale2));\r\n     } // stolen from here https://bl.ocks.org/clhenrick/282c8e050fd7695fdcf14bda6d352c26 \r\n     // Initialize must be called after brush is moved to initial location\r\n     var initialized = true;\r\n     var to_be_updated = true;\r\n  function brushed() {\r\n    var brusher = d3.select(ref)\r\n                    .select(\".selection\")\r\n    // Need can convert the width of selection into relevant indexes\r\n    // To be used while plotting\r\n    // Using the correct scale\r\n    var start = Number(brusher.attr(\"x\"));\r\n    var end = start + Number(brusher.attr(\"width\"));\r\n    var brush_domain = [Math.floor(xScale2.invert(start)),\r\n                        Math.floor(xScale2.invert(end))];\r\n    // Prevent infinite loop\r\n    // As initialized then update props, \r\n    //t hen initialized again on automatic rerender\r\n    if(initialized){\r\n    callback(brush_domain, to_be_updated);\r\n                    }\r\n  };\r\n}\r\n\r\n","import React from \"react\";\r\nimport { Component } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport {make_plot,clean} from \"../d3.js\";\r\nimport \"../css/chart.css\"\r\nexport default class Chart extends Component{\r\n\tcomponentDidMount(){\r\n\t\tmake_plot(this.props.data,\r\n\t\t\tReactDOM.findDOMNode(this));\r\n\t};\r\n\tcomponentDidUpdate(){\r\n        clean(ReactDOM.findDOMNode(this));\r\n\t\tmake_plot(this.props.data,\r\n\t\t\tReactDOM.findDOMNode(this));\r\n\t};\r\n\trender(){\r\n\t\treturn(<div>\r\n\t\t\t     <h3>{this.props.title}</h3>\r\n\t\t\t     <svg className = \"chart\">\r\n\t\t\t     </svg>\r\n\t\t\t   </div>\r\n\t\t\t);\r\n\t}\r\n}","import React from \"react\";\nimport { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {connect} from \"react-redux\";\nimport { make_slider, clean } from \"../d3.js\";\nimport {new_brush} from \"../actions/index.js\"\nimport \"../css/slider.css\"\nclass Slider extends Component{\n    toBeUpdated = true;\n\n\tbrush_callback = (brush_domain, to_be_updated) => {\n\t\tif( !(!to_be_updated & this.toBeUpdated) ){\n\t\t\t// Prevent 0 update on hover\n          this.props.dispatch(new_brush(brush_domain));\n               }\n\n\t\t  this.toBeUpdated = to_be_updated;\n          \n\t}\n\n\tcomponentDidMount(){\n        make_slider(this.props.data,\n\t\t\t       ReactDOM.findDOMNode(this),\n\t\t\t       this.brush_callback,\n\t\t\t       this.props.brush)\n\t}\n\tcomponentDidUpdate(){\n\t\tclean(ReactDOM.findDOMNode(this));\n        make_slider(this.props.data,\n\t\t\t       ReactDOM.findDOMNode(this),\n\t\t\t       this.brush_callback,\n\t\t\t       this.props.brush)\n\t}\n\tshouldComponentUpdate(){\n\t\tif(!this.toBeUpdated){return(false)};\n\t\treturn(true);\n\t}\n\trender(){\n\t\treturn(<div>\n\t\t\t     <svg className = \"slider\">\n\t\t\t     </svg>\n\t\t\t   </div>\n\t\t\t   );\n}}\n\nconst mapStateToProps = state => {\n\treturn {data: state.data,\n\t        brush: state.brush}\n}\nexport default connect(mapStateToProps)(Slider);","export function brush_data(data,brush_domain){\r\n           if (brush_domain===null){\r\n\t\t\treturn data\r\n\t\t}\r\n\t\treturn data.slice(brush_domain[0],brush_domain[1])\r\n\t                 }\r\nexport function get_data_row(data,variable){\r\n   return data.map(function(d, index){\r\n   \t      return {\"x\":index,\"y\":d[variable]}})\r\n}","import React from \"react\";\r\nimport { Component } from \"react\";\r\nimport { random_vector } from \"../generate.js\";\r\nimport Chart from \"./chart.js\";\r\nimport Slider from \"./slider.js\";\r\nimport {connect} from \"react-redux\";\r\nimport {brush_data, get_data_row} from \"../helpers.js\";\r\nimport {new_data_point} from \"../actions/index.js\";\r\nclass AppLogic extends Component{\r\n    componentDidMount(){\r\n        setInterval(() => this.props.dispatch(  \r\n    \t      new_data_point({\"x\":1,\"y\":1,\"z\":1})),500)\r\n    \t// Test for future Onlinization of the chart:)\r\n    \t// Not ready yet - uncontrolled brushing\r\n    \t// Brush rerenders on every brush resulting in problems\r\n        // Need to try to clean slider and add initial brush\r\n        return !window.inProcessofDoingBrush \r\n    }\r\n\trender(){\r\n\t\treturn(<div>\r\n\t\t\t      <h1>Hello React+D3!</h1>\r\n\t\t\t      <Chart data = {brush_data(\r\n\t\t\t      \t               get_data_row(this.props.data,\"x\"),\r\n\t\t\t      \t                      this.props.brush)}\r\n\t\t\t             title = \"x\"/>\r\n\t\t\t      <Chart data = {brush_data(\r\n\t\t\t      \t               get_data_row(this.props.data,\"y\"),\r\n\t\t\t      \t                      this.props.brush)}\r\n\t\t\t             title = \"y\"/>\r\n\t\t\t      <Chart data = {brush_data(\r\n\t\t\t      \t               get_data_row(this.props.data,\"z\"),\r\n\t\t\t      \t                      this.props.brush)}\r\n\t\t\t             title = \"z\"/>\r\n\t\t\t       <h4>I am a slider, use me)))</h4>\r\n\t\t\t      <Slider data = {this.props.data}/>\r\n\t\t\t    </div>);\r\n\t}\r\n}\r\nconst mapStateToProps = state => {\r\n\treturn {data: state.data,\r\n\t        brush: state.brush}\r\n}\r\nexport default connect(mapStateToProps)(AppLogic);","import React from \"react\";\r\nimport { Component } from \"react\";\r\nimport { Provider } from \"react-redux\";\r\nimport { createStore } from \"redux\";\r\nimport reducers from \"../reducers/index.js\";\r\nimport AppLogic from \"./appLogic.js\"\r\n\r\nexport default class App extends Component{\r\n\trender(){\r\n\t\treturn( <Provider store={createStore(reducers)}>\r\n\t\t\t       <AppLogic/>\r\n                  </Provider>\r\n\t\t\t   );\r\n\t}\r\n}\r\n\r\n\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport App from \"./components/app.js\";\r\n\r\nReactDOM.render(\r\n\t<App />,\r\n\tdocument.querySelector(\"#root\")\r\n\t);\r\n"],"sourceRoot":""}